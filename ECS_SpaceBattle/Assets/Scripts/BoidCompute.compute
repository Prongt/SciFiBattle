/*
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Boid


struct data
{
	float id;
	float3 pos;
	float3 neighboursPos[];
};

float count;
float maxDist;


RWStructuredBuffer<data> dataBuffer;
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void Boid (uint3 id : SV_DispatchThreadID)
{
/*
	 maxDist = 10;
    var neighbourCount = 0;
    var boidPos = trans.Value;
    NativeMultiHashMapIterator<int> it;
    var index = data.index;

	for (int i = 0; i < positions.Length; i++)
    {
        if (neighbourCount > maxNeighbours)
        {
            break;
        }

        if (positions.TryGetValue(i, out v))
        {
            if (Vector3.Distance(boidPos, v) < maxDist)
            {
                neighbourCount++;
                //hashMap.Add(index, v);
            }
        }           
    }
	*/

	dataBuffer[id.x].pos += desired * dataBuffer[id.x].d.z;

    //Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);


}
*/
